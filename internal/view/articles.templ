package view

import (
	"fmt"
	"github.com/synic/adamthings.me/internal/model"
)

templ ArticlesView(pd model.PageData) {
	@BaseLayout("") {
		if pd.Page <= 1 {
			if (pd.Tag != "" || pd.Search != "") {
				<h1 class="pb-0 my-0 font-bold">
					if pd.Tag != "" {
						Tag: { pd.Tag }
					} else if pd.Search != "" {
						Search results: { pd.Search }
					}
				</h1>
				<div class="mt-0 mb-6">
					if len(pd.Items) == 1 {
						1 article
					} else {
						{ fmt.Sprintf("%d articles", len(pd.Items)) }
					}
				</div>
			}
		}
		for i, a := range pd.Items {
			<article
				hx-target="#content"
				hx-swap="innerHTML scroll:top"
				hx-push-url="true"
				hx-trigger="click"
			>
				<div class="cursor-pointer" id={ fmt.Sprintf("article-%s", a.Slug) } hx-get={ string(a.SafeURL()) }>
					<div>
						<a
							class="font-bold text-rose-500 no-underline hover:underline"
							href={ a.SafeURL() }
							hx-boost="true"
							hx-trigger="click consume"
						>
							<h1 class={ "text-rose-500", templ.KV("mt-0", i == 0) }>
								{ a.Title }
							</h1>
						</a>
						<div class="mt-3 text-base italic">
							if a.IsPublished {
								Published: { a.PublishedAt.Format("Jan 2, 2006") }
							} else {
								<span class="text-sm text-red-200">
									Unpublished
								</span>
							}
						</div>
					</div>
					<div class="mt-3 mdgen">
						@templ.Raw(a.Summary)
					</div>
					<a hx-get={ string(a.SafeURL()) } hx-boost="true" href={ a.SafeURL() } hx-trigger="click consume">
						<i class="text-base">Read more...</i>
					</a>
				</div>
				if i < len(pd.Items) - 1 || pd.TotalPages > 1 {
					<hr class="my-8 h-px bg-gray-200 border-0 dark:bg-gray-700"/>
				}
			</article>
		}
		if len(pd.Items) <= 0 {
			No articles found.
		} else if pd.TotalPages > 1 {
			@pageButtons(pd)
		}
	}
}

func pageButtonBaseAttrs(disabled bool) []string {
	attrs := []string{
		"flex",
		"flex-none",
		"justify-center",
		"items-center",
		"text-center",
		"border",
		"border-gray-700",
		"cursor-pointer",
		"size-8",
	}

	if !disabled {
		attrs = append(attrs, "hover:text-white", "hover:bg-gray-700")
	} else {
		attrs = append(attrs, "text-slate-500")
	}

	return attrs

}

func pageButtonAttrs(pd model.PageData, i int) []string {
	attrs := append(pageButtonBaseAttrs(false),
		"border",
		"border-gray-700",
	)

	if i+1 == pd.Page {
		attrs = append(attrs, "text-white", "bg-gray-700")
	}

	return attrs
}

func pageButtonPrevAttrs(pd model.PageData) []string {
	attrs := append(pageButtonBaseAttrs(pd.Page <= 1),
		"rounded-l-lg",
	)

	return attrs
}

func pageButtonNextAttrs(pd model.PageData) []string {
	attrs := append(pageButtonBaseAttrs(pd.Page >= pd.TotalPages),
		"rounded-r-lg",
	)

	return attrs
}

templ pageButtons(pd model.PageData) {
	<div class="flex justify-center items-center mx-auto w-full">
		<ul
			class="flex flex-row flex-wrap p-0 list-none list-inside no-underline"
			hx-target="#content"
			hx-swap="innerHTML show:window:top"
			hx-trigger="click consume"
			hx-push-url="true"
			hx-boost="true"
		>
			<li
				if pd.Page > 1 {
					hx-get={ string(templ.URL(fmt.Sprintf("/?page=%d&perPage=%d&search=%s&tag=%s", pd.Page-1, pd.PerPage, pd.Search, pd.Tag))) }
				}
				class={ pageButtonPrevAttrs(pd) }
			>
				<a
					if pd.Page >1 {
						href={ templ.URL(fmt.Sprintf("/?page=%d&perPage=%d&search=%s&tag=%s", pd.Page-1, pd.PerPage, pd.Search, pd.Tag)) }
					}
					class="no-underline"
				>❮</a>
			</li>
			for i := range pd.TotalPages {
				<li
					hx-get={ string(templ.URL(fmt.Sprintf("/?page=%d&perPage=%d&search=%s&tag=%s", i+1, pd.PerPage, pd.Search, pd.Tag))) }
					class={ pageButtonAttrs(pd, i) }
				>
					<a href={ templ.URL(fmt.Sprintf("/?page=%d&perPage=%d&search=%s&tag=%s", i+1, pd.PerPage, pd.Search, pd.Tag)) } class="no-underline">
						{ fmt.Sprint(i+1) }
					</a>
				</li>
			}
			<li
				if pd.Page < pd.TotalPages {
					hx-get={ string(templ.URL(fmt.Sprintf("/?page=%d&perPage=%d&search=%s&tag=%s", pd.Page+1, pd.PerPage, pd.Search, pd.Tag))) }
				}
				class={ pageButtonNextAttrs(pd) }
			>
				<a
					if pd.Page < pd.TotalPages {
						href={ templ.URL(fmt.Sprintf("/?page=%d&perPage=%d&search=%s&tag=%s", pd.Page+1, pd.PerPage, pd.Search, pd.Tag)) }
					}
					class="no-underline"
				>❯</a>
			</li>
		</ul>
	</div>
}
