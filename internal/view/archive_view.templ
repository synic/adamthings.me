package view

import (
	"fmt"
	"sort"
)

templ ArchiveView(articleCount int, tags map[string]int) {
	@BaseLayout("Article Archive") {
		<div class="flex flex-col w-full">
			<h1 class="my-0 text-rose-500">Archive</h1>
			<div class="pb-4 mt-1 grow">
				Total articles: { fmt.Sprintf("%d", articleCount ) }
			</div>
			<div class="block pb-4 md:hidden grow" hx-include="#search">
				<form method="post" action="/">
					<input
						class="flex-auto px-2 font-normal bg-gray-700 rounded border border-gray-600 border-solid outline-gray-600 max-w-56"
						placeholder="Search..."
						type="text"
						name="search"
						hx-post="/"
						id="search"
					/>
					<button
						class="px-2 text-center border-gray-700 bg-sky-700 text-slate-300"
						type="submit"
						hx-post="/"
						hx-trigger="click consume"
					>
						Go
					</button>
				</form>
			</div>
			<div class="pb-4 grow">
				<h2 class="mt-0 text-rose-500 md:hidden">Tags</h2>
				<p class="mt-0">
					<ul class="flex flex-row flex-wrap p-0 m-0 list-none list-inside">
						for _, t := range sortedTags(tags) {
							<li
								class="py-0.5 px-1 mr-1 mb-1 text-center bg-gray-700 rounded border-gray-600 border-solid cursor-pointer"
								id={ fmt.Sprintf("tag-link-%s", t.tag) }
								hx-on::before-cleanup-element="document.getElementById('search-nav').value = '';"
							>
								<a class="px-1 no-underline hover:underline" href={ templ.URL(fmt.Sprintf("/?tag=%s", t.tag)) }>
									{ t.tag } ({ fmt.Sprintf("%d",t.count) })
								</a>
							</li>
						}
					</ul>
				</p>
			</div>
			<div class="grow">
				<h2 class="mt-0 text-rose-500">About Me</h2>
				<p class="mt-0">
					<img src="/static/img/me.jpg" width="200" height="250" alt="Photo of me"/>
				</p>
				<p class="mt-0">
					Software Developer, Amateur Photographer, and NeoVim enthusiast :)
				</p>
				<p class="mt-0">
					Links:
					<a href="https://github.com/synic">GitHub</a> |
					<a href="https://instagram.com/adamthings.me">Instagram</a> |
					<a href="https://bsky.app/profile/invalidhandle.lol">BlueSky</a>
				</p>
			</div>
		</div>
	}
}

type tagInfo struct {
	tag   string
	count int
}

func sortedTags(tagCounts map[string]int) []tagInfo {
	tags := make([]tagInfo, 0, len(tagCounts))
	for key, value := range tagCounts {
		tags = append(tags, tagInfo{tag: key, count: value})
	}

	sort.Slice(tags, func(i, j int) bool {
		return tags[i].tag < tags[j].tag
	})

	return tags
}
