package view

import (
	"context"
	"fmt"
	"github.com/synic/adamthings.me/internal"
	"github.com/synic/adamthings.me/internal/middleware"
	"github.com/synic/adamthings.me/internal/model"
	"io"
)

// use `BaseLayout` instead, which will set up `baseLayoutConfig`
templ baseLayout(conf baseLayoutConfig) {
	if !isPartial(ctx) {
		<!DOCTYPE html>
		<html lang="en">
			@head(conf, false)
			<body
				id="body"
				class="w-full text-xl bg-gray-900 md:p-6 md:text-xl lg:p-9 lg:text-2xl xl:px-12 xl:pt-8 text-slate-300"
				hx-ext="head-support"
				hx-target="#content"
				hx-swap="innerHTML show:window:top swap:150ms"
				hx-push-url="true"
				hx-boost="true"
			>
				<div class="mx-auto bg-gray-800 shadow-xl md:rounded-xl xl:max-w-6xl">
					@header()
					<div class="p-6">
						<main id="content" class="fade-in fade-out">
							{ children... }
						</main>
					</div>
				</div>
				@scrollToTopButton()
			</body>
		</html>
	} else {
		@head(conf, true)
		{ children... }
	}
}

templ head(conf baseLayoutConfig, partial bool) {
	<head>
		if !partial {
			<meta charset="utf-8" hx-preserve="true"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0" hx-preserve="true"/>
			<meta name="description" content="Adam's Blog. Programming, Vim, Photography, and more!" hx-preserve="true"/>
			<script src={ staticfile("/static/js/htmx.min.js") } hx-preserve="true" defer></script>
			<script src={ staticfile("/static/js/htmx-head-support.min.js") } hx-preserve="true" defer></script>
			@inlinestatic()
			<link rel="icon" href="data:," hx-preserve="true"/>
		}
		@openGraphTags(conf.og)
		<title>
			Adam's Blog
			if conf.title != "" {
				- { conf.title }
			}
		</title>
	</head>
}

templ openGraphTags(og model.OpenGraphData) {
	if og.Type != "" {
		<meta property="og:type" content={ og.Type }/>
	} else {
		<meta property="og:type" content="website"/>
	}
	if og.Title != "" {
		<meta property="og:title" content={ og.Title }/>
	}
	if og.Description != "" {
		<meta property="og:description" content={ og.Description }/>
	}
	if og.Image != "" {
		<meta property="og:image" content={ og.Image }/>
	}
}

templ header() {
	<header class="w-full shadow-md">
		<form
			method="post"
			action="/"
			autocomplete="off"
			class="flex flex-row flex-nowrap pl-6 rounded-md shadow-md"
		>
			<div
				class="justify-start py-3 whitespace-nowrap cursor-pointer shrink"
				hx-get="/"
				hx-on::after-request="document.getElementById('search-nav').value = '';"
				hx-trigger="click"
			>
				<a href="/" hx-trigger="click consume" class="no-underline hover:underline">
					<span class="font-bold text-sky-700">::/</span> Adam's Things
				</a>
			</div>
			<div class="grow">&nbsp;</div>
			<input
				class="hidden flex-auto px-2 my-2 mr-4 font-normal bg-gray-700 rounded border border-gray-600 border-solid md:inline outline-gray-600 md:max-w-40 lg:max-w-56"
				placeholder="Search..."
				type="text"
				name="search"
				id="search-nav"
				hx-post="/"
				hx-swap="innerHTML show:window:top"
				hx-trigger="input changed delay:200ms, search"
			/>
			<nav class="flex flex-row content-end p-0 m-0 grow-0 shrink">
				@navlink("/", "Home", true)
				@navlink("/archive/", "Archive", false)
			</nav>
		</form>
	</header>
}

templ navlink(url, label string, hideMobile bool) {
	<a
		id={ fmt.Sprintf("nav-link-%s", label) }
		hx-on::after-request="document.getElementById('search-nav').value = '';"
		class={
			"py-3 px-5 text-center no-underline border-l border-gray-700 cursor-pointer hover:text-white hover:bg-gray-700 item-center w-22 lg:last:rounded-tr-xl",
			templ.KV("hidden lg:block", hideMobile),
		}
		href={ templ.URL(url) }
	>
		{ label }
	</a>
}

templ scrollToTopButton() {
	<a
		id="scroll-to-top"
		onclick="window.scrollTo({ top: 0, behavior: 'smooth' });"
		class="hidden fixed bottom-6 p-2 text-center no-underline bg-gray-700 rounded-md border border-gray-600 border-solid cursor-pointer md:bottom-12 lg:bottom-14 xl:bottom-16 text-slate-300"
	>
		<svg class="w-5 h-5 fill-slate-300" viewBox="0 0 115.4 122.88">
			<path d="M24.94,67.88A14.66,14.66,0,0,1,4.38,47L47.83,4.21a14.66,14.66,0,0,1,20.56,0L111,46.15A14.66,14.66,0,0,1,90.46,67.06l-18-17.69-.29,59.17c-.1,19.28-29.42,19-29.33-.25L43.14,50,24.94,67.88Z"></path>
		</svg>
	</a>
	<script type="text/javascript">
		const btn = document.getElementById("scroll-to-top");
		const content = document.getElementById("content");

		window.addEventListener("scroll", showScrollToTopButton)
		window.addEventListener("resize", showScrollToTopButton)
		window.addEventListener("htmx:afterswap", showScrollToTopButton)

		function showScrollToTopButton() {
			if(window.pageYOffset > 100) {
				btn.style.display = "block";
				const btnRect = btn.getBoundingClientRect();
				const contentRect = content.getBoundingClientRect();
				btn.style.left = (contentRect.right - btnRect.width).toString() + "px";
			} else {
				btn.style.display = "none";
			}
		}

		showScrollToTopButton();
	</script>
}

func isPartial(ctx context.Context) bool {
	if isPartial, ok := ctx.Value(middleware.HtmxPartialContextKey).(bool); ok {
		return isPartial
	}
	return false
}

func staticfile(path string) string {
	return fmt.Sprintf("%s?b=%s", path, internal.BuildTime)
}

func inlinestatic() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		if data, ok := ctx.Value("inline-static-files").([]byte); ok {
			_, err := w.Write(data)
			return err
		}

		return fmt.Errorf("unable to locate cached static files")
	})
}
